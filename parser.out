Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> script
Rule 1     script -> statements
Rule 2     statements -> statement statements
Rule 3     statements -> empty
Rule 4     empty -> <empty>
Rule 5     key -> STRING
Rule 6     key -> BAREWORD
Rule 7     keys -> key keys
Rule 8     keys -> empty
Rule 9     statement -> VARIABLE EQUALS NUMBER
Rule 10    statement -> binop
Rule 11    expression -> VARIABLE
Rule 12    expression -> key
Rule 13    expression -> NUMBER
Rule 14    binop -> key EQUALS expression
Rule 15    binop -> key GTHAN expression
Rule 16    binop -> key GEQUALS expression
Rule 17    binop -> key LEQUALS expression
Rule 18    binop -> key LTHAN expression
Rule 19    list -> LBRACE keys RBRACE
Rule 20    expression -> list
Rule 21    block -> LBRACE statements RBRACE
Rule 22    expression -> block

Terminals, with rules where they appear

BAREWORD             : 6
EQUALS               : 9 14
GEQUALS              : 16
GTHAN                : 15
LBRACE               : 19 21
LEQUALS              : 17
LTHAN                : 18
NUMBER               : 9 13
RBRACE               : 19 21
STRING               : 5
VARIABLE             : 9 11
error                : 

Nonterminals, with rules where they appear

binop                : 10
block                : 22
empty                : 3 8
expression           : 14 15 16 17 18
key                  : 7 12 14 15 16 17 18
keys                 : 7 19
list                 : 20
script               : 0
statement            : 2
statements           : 1 2 21

Parsing method: LALR

state 0

    (0) S' -> . script
    (1) script -> . statements
    (2) statements -> . statement statements
    (3) statements -> . empty
    (9) statement -> . VARIABLE EQUALS NUMBER
    (10) statement -> . binop
    (4) empty -> .
    (14) binop -> . key EQUALS expression
    (15) binop -> . key GTHAN expression
    (16) binop -> . key GEQUALS expression
    (17) binop -> . key LEQUALS expression
    (18) binop -> . key LTHAN expression
    (5) key -> . STRING
    (6) key -> . BAREWORD

    VARIABLE        shift and go to state 7
    $end            reduce using rule 4 (empty -> .)
    STRING          shift and go to state 9
    BAREWORD        shift and go to state 5

    statements                     shift and go to state 1
    statement                      shift and go to state 6
    binop                          shift and go to state 4
    script                         shift and go to state 3
    key                            shift and go to state 2
    empty                          shift and go to state 8

state 1

    (1) script -> statements .

    $end            reduce using rule 1 (script -> statements .)


state 2

    (14) binop -> key . EQUALS expression
    (15) binop -> key . GTHAN expression
    (16) binop -> key . GEQUALS expression
    (17) binop -> key . LEQUALS expression
    (18) binop -> key . LTHAN expression

    EQUALS          shift and go to state 12
    GTHAN           shift and go to state 11
    GEQUALS         shift and go to state 14
    LEQUALS         shift and go to state 10
    LTHAN           shift and go to state 13


state 3

    (0) S' -> script .



state 4

    (10) statement -> binop .

    VARIABLE        reduce using rule 10 (statement -> binop .)
    STRING          reduce using rule 10 (statement -> binop .)
    BAREWORD        reduce using rule 10 (statement -> binop .)
    $end            reduce using rule 10 (statement -> binop .)
    RBRACE          reduce using rule 10 (statement -> binop .)


state 5

    (6) key -> BAREWORD .

    EQUALS          reduce using rule 6 (key -> BAREWORD .)
    GTHAN           reduce using rule 6 (key -> BAREWORD .)
    GEQUALS         reduce using rule 6 (key -> BAREWORD .)
    LEQUALS         reduce using rule 6 (key -> BAREWORD .)
    LTHAN           reduce using rule 6 (key -> BAREWORD .)
    STRING          reduce using rule 6 (key -> BAREWORD .)
    BAREWORD        reduce using rule 6 (key -> BAREWORD .)
    RBRACE          reduce using rule 6 (key -> BAREWORD .)
    VARIABLE        reduce using rule 6 (key -> BAREWORD .)
    $end            reduce using rule 6 (key -> BAREWORD .)


state 6

    (2) statements -> statement . statements
    (2) statements -> . statement statements
    (3) statements -> . empty
    (9) statement -> . VARIABLE EQUALS NUMBER
    (10) statement -> . binop
    (4) empty -> .
    (14) binop -> . key EQUALS expression
    (15) binop -> . key GTHAN expression
    (16) binop -> . key GEQUALS expression
    (17) binop -> . key LEQUALS expression
    (18) binop -> . key LTHAN expression
    (5) key -> . STRING
    (6) key -> . BAREWORD

    VARIABLE        shift and go to state 7
    $end            reduce using rule 4 (empty -> .)
    RBRACE          reduce using rule 4 (empty -> .)
    STRING          shift and go to state 9
    BAREWORD        shift and go to state 5

    statements                     shift and go to state 15
    statement                      shift and go to state 6
    binop                          shift and go to state 4
    key                            shift and go to state 2
    empty                          shift and go to state 8

state 7

    (9) statement -> VARIABLE . EQUALS NUMBER

    EQUALS          shift and go to state 16


state 8

    (3) statements -> empty .

    $end            reduce using rule 3 (statements -> empty .)
    RBRACE          reduce using rule 3 (statements -> empty .)


state 9

    (5) key -> STRING .

    EQUALS          reduce using rule 5 (key -> STRING .)
    GTHAN           reduce using rule 5 (key -> STRING .)
    GEQUALS         reduce using rule 5 (key -> STRING .)
    LEQUALS         reduce using rule 5 (key -> STRING .)
    LTHAN           reduce using rule 5 (key -> STRING .)
    STRING          reduce using rule 5 (key -> STRING .)
    BAREWORD        reduce using rule 5 (key -> STRING .)
    RBRACE          reduce using rule 5 (key -> STRING .)
    VARIABLE        reduce using rule 5 (key -> STRING .)
    $end            reduce using rule 5 (key -> STRING .)


state 10

    (17) binop -> key LEQUALS . expression
    (11) expression -> . VARIABLE
    (12) expression -> . key
    (13) expression -> . NUMBER
    (20) expression -> . list
    (22) expression -> . block
    (5) key -> . STRING
    (6) key -> . BAREWORD
    (19) list -> . LBRACE keys RBRACE
    (21) block -> . LBRACE statements RBRACE

    VARIABLE        shift and go to state 21
    NUMBER          shift and go to state 19
    STRING          shift and go to state 9
    BAREWORD        shift and go to state 5
    LBRACE          shift and go to state 17

    list                           shift and go to state 18
    key                            shift and go to state 20
    expression                     shift and go to state 22
    block                          shift and go to state 23

state 11

    (15) binop -> key GTHAN . expression
    (11) expression -> . VARIABLE
    (12) expression -> . key
    (13) expression -> . NUMBER
    (20) expression -> . list
    (22) expression -> . block
    (5) key -> . STRING
    (6) key -> . BAREWORD
    (19) list -> . LBRACE keys RBRACE
    (21) block -> . LBRACE statements RBRACE

    VARIABLE        shift and go to state 21
    NUMBER          shift and go to state 19
    STRING          shift and go to state 9
    BAREWORD        shift and go to state 5
    LBRACE          shift and go to state 17

    list                           shift and go to state 18
    key                            shift and go to state 20
    expression                     shift and go to state 24
    block                          shift and go to state 23

state 12

    (14) binop -> key EQUALS . expression
    (11) expression -> . VARIABLE
    (12) expression -> . key
    (13) expression -> . NUMBER
    (20) expression -> . list
    (22) expression -> . block
    (5) key -> . STRING
    (6) key -> . BAREWORD
    (19) list -> . LBRACE keys RBRACE
    (21) block -> . LBRACE statements RBRACE

    VARIABLE        shift and go to state 21
    NUMBER          shift and go to state 19
    STRING          shift and go to state 9
    BAREWORD        shift and go to state 5
    LBRACE          shift and go to state 17

    list                           shift and go to state 18
    key                            shift and go to state 20
    expression                     shift and go to state 25
    block                          shift and go to state 23

state 13

    (18) binop -> key LTHAN . expression
    (11) expression -> . VARIABLE
    (12) expression -> . key
    (13) expression -> . NUMBER
    (20) expression -> . list
    (22) expression -> . block
    (5) key -> . STRING
    (6) key -> . BAREWORD
    (19) list -> . LBRACE keys RBRACE
    (21) block -> . LBRACE statements RBRACE

    VARIABLE        shift and go to state 21
    NUMBER          shift and go to state 19
    STRING          shift and go to state 9
    BAREWORD        shift and go to state 5
    LBRACE          shift and go to state 17

    list                           shift and go to state 18
    key                            shift and go to state 20
    expression                     shift and go to state 26
    block                          shift and go to state 23

state 14

    (16) binop -> key GEQUALS . expression
    (11) expression -> . VARIABLE
    (12) expression -> . key
    (13) expression -> . NUMBER
    (20) expression -> . list
    (22) expression -> . block
    (5) key -> . STRING
    (6) key -> . BAREWORD
    (19) list -> . LBRACE keys RBRACE
    (21) block -> . LBRACE statements RBRACE

    VARIABLE        shift and go to state 21
    NUMBER          shift and go to state 19
    STRING          shift and go to state 9
    BAREWORD        shift and go to state 5
    LBRACE          shift and go to state 17

    list                           shift and go to state 18
    key                            shift and go to state 20
    expression                     shift and go to state 27
    block                          shift and go to state 23

state 15

    (2) statements -> statement statements .

    $end            reduce using rule 2 (statements -> statement statements .)
    RBRACE          reduce using rule 2 (statements -> statement statements .)


state 16

    (9) statement -> VARIABLE EQUALS . NUMBER

    NUMBER          shift and go to state 28


state 17

    (19) list -> LBRACE . keys RBRACE
    (21) block -> LBRACE . statements RBRACE
    (7) keys -> . key keys
    (8) keys -> . empty
    (2) statements -> . statement statements
    (3) statements -> . empty
    (5) key -> . STRING
    (6) key -> . BAREWORD
    (4) empty -> .
    (9) statement -> . VARIABLE EQUALS NUMBER
    (10) statement -> . binop
    (14) binop -> . key EQUALS expression
    (15) binop -> . key GTHAN expression
    (16) binop -> . key GEQUALS expression
    (17) binop -> . key LEQUALS expression
    (18) binop -> . key LTHAN expression

    STRING          shift and go to state 9
    BAREWORD        shift and go to state 5
    RBRACE          reduce using rule 4 (empty -> .)
    VARIABLE        shift and go to state 7

    statements                     shift and go to state 29
    key                            shift and go to state 31
    binop                          shift and go to state 4
    keys                           shift and go to state 30
    statement                      shift and go to state 6
    empty                          shift and go to state 32

state 18

    (20) expression -> list .

    VARIABLE        reduce using rule 20 (expression -> list .)
    STRING          reduce using rule 20 (expression -> list .)
    BAREWORD        reduce using rule 20 (expression -> list .)
    $end            reduce using rule 20 (expression -> list .)
    RBRACE          reduce using rule 20 (expression -> list .)


state 19

    (13) expression -> NUMBER .

    VARIABLE        reduce using rule 13 (expression -> NUMBER .)
    STRING          reduce using rule 13 (expression -> NUMBER .)
    BAREWORD        reduce using rule 13 (expression -> NUMBER .)
    $end            reduce using rule 13 (expression -> NUMBER .)
    RBRACE          reduce using rule 13 (expression -> NUMBER .)


state 20

    (12) expression -> key .

    VARIABLE        reduce using rule 12 (expression -> key .)
    STRING          reduce using rule 12 (expression -> key .)
    BAREWORD        reduce using rule 12 (expression -> key .)
    $end            reduce using rule 12 (expression -> key .)
    RBRACE          reduce using rule 12 (expression -> key .)


state 21

    (11) expression -> VARIABLE .

    VARIABLE        reduce using rule 11 (expression -> VARIABLE .)
    STRING          reduce using rule 11 (expression -> VARIABLE .)
    BAREWORD        reduce using rule 11 (expression -> VARIABLE .)
    $end            reduce using rule 11 (expression -> VARIABLE .)
    RBRACE          reduce using rule 11 (expression -> VARIABLE .)


state 22

    (17) binop -> key LEQUALS expression .

    VARIABLE        reduce using rule 17 (binop -> key LEQUALS expression .)
    STRING          reduce using rule 17 (binop -> key LEQUALS expression .)
    BAREWORD        reduce using rule 17 (binop -> key LEQUALS expression .)
    RBRACE          reduce using rule 17 (binop -> key LEQUALS expression .)
    $end            reduce using rule 17 (binop -> key LEQUALS expression .)


state 23

    (22) expression -> block .

    VARIABLE        reduce using rule 22 (expression -> block .)
    STRING          reduce using rule 22 (expression -> block .)
    BAREWORD        reduce using rule 22 (expression -> block .)
    $end            reduce using rule 22 (expression -> block .)
    RBRACE          reduce using rule 22 (expression -> block .)


state 24

    (15) binop -> key GTHAN expression .

    VARIABLE        reduce using rule 15 (binop -> key GTHAN expression .)
    STRING          reduce using rule 15 (binop -> key GTHAN expression .)
    BAREWORD        reduce using rule 15 (binop -> key GTHAN expression .)
    RBRACE          reduce using rule 15 (binop -> key GTHAN expression .)
    $end            reduce using rule 15 (binop -> key GTHAN expression .)


state 25

    (14) binop -> key EQUALS expression .

    VARIABLE        reduce using rule 14 (binop -> key EQUALS expression .)
    STRING          reduce using rule 14 (binop -> key EQUALS expression .)
    BAREWORD        reduce using rule 14 (binop -> key EQUALS expression .)
    RBRACE          reduce using rule 14 (binop -> key EQUALS expression .)
    $end            reduce using rule 14 (binop -> key EQUALS expression .)


state 26

    (18) binop -> key LTHAN expression .

    VARIABLE        reduce using rule 18 (binop -> key LTHAN expression .)
    STRING          reduce using rule 18 (binop -> key LTHAN expression .)
    BAREWORD        reduce using rule 18 (binop -> key LTHAN expression .)
    RBRACE          reduce using rule 18 (binop -> key LTHAN expression .)
    $end            reduce using rule 18 (binop -> key LTHAN expression .)


state 27

    (16) binop -> key GEQUALS expression .

    VARIABLE        reduce using rule 16 (binop -> key GEQUALS expression .)
    STRING          reduce using rule 16 (binop -> key GEQUALS expression .)
    BAREWORD        reduce using rule 16 (binop -> key GEQUALS expression .)
    RBRACE          reduce using rule 16 (binop -> key GEQUALS expression .)
    $end            reduce using rule 16 (binop -> key GEQUALS expression .)


state 28

    (9) statement -> VARIABLE EQUALS NUMBER .

    VARIABLE        reduce using rule 9 (statement -> VARIABLE EQUALS NUMBER .)
    STRING          reduce using rule 9 (statement -> VARIABLE EQUALS NUMBER .)
    BAREWORD        reduce using rule 9 (statement -> VARIABLE EQUALS NUMBER .)
    $end            reduce using rule 9 (statement -> VARIABLE EQUALS NUMBER .)
    RBRACE          reduce using rule 9 (statement -> VARIABLE EQUALS NUMBER .)


state 29

    (21) block -> LBRACE statements . RBRACE

    RBRACE          shift and go to state 33


state 30

    (19) list -> LBRACE keys . RBRACE

    RBRACE          shift and go to state 34


state 31

    (7) keys -> key . keys
    (14) binop -> key . EQUALS expression
    (15) binop -> key . GTHAN expression
    (16) binop -> key . GEQUALS expression
    (17) binop -> key . LEQUALS expression
    (18) binop -> key . LTHAN expression
    (7) keys -> . key keys
    (8) keys -> . empty
    (5) key -> . STRING
    (6) key -> . BAREWORD
    (4) empty -> .

    EQUALS          shift and go to state 12
    GTHAN           shift and go to state 11
    GEQUALS         shift and go to state 14
    LEQUALS         shift and go to state 10
    LTHAN           shift and go to state 13
    STRING          shift and go to state 9
    BAREWORD        shift and go to state 5
    RBRACE          reduce using rule 4 (empty -> .)

    keys                           shift and go to state 35
    empty                          shift and go to state 37
    key                            shift and go to state 36

state 32

    (8) keys -> empty .
    (3) statements -> empty .

  ! reduce/reduce conflict for RBRACE resolved using rule 3 (statements -> empty .)
    RBRACE          reduce using rule 3 (statements -> empty .)

  ! RBRACE          [ reduce using rule 8 (keys -> empty .) ]


state 33

    (21) block -> LBRACE statements RBRACE .

    VARIABLE        reduce using rule 21 (block -> LBRACE statements RBRACE .)
    STRING          reduce using rule 21 (block -> LBRACE statements RBRACE .)
    BAREWORD        reduce using rule 21 (block -> LBRACE statements RBRACE .)
    $end            reduce using rule 21 (block -> LBRACE statements RBRACE .)
    RBRACE          reduce using rule 21 (block -> LBRACE statements RBRACE .)


state 34

    (19) list -> LBRACE keys RBRACE .

    VARIABLE        reduce using rule 19 (list -> LBRACE keys RBRACE .)
    STRING          reduce using rule 19 (list -> LBRACE keys RBRACE .)
    BAREWORD        reduce using rule 19 (list -> LBRACE keys RBRACE .)
    $end            reduce using rule 19 (list -> LBRACE keys RBRACE .)
    RBRACE          reduce using rule 19 (list -> LBRACE keys RBRACE .)


state 35

    (7) keys -> key keys .

    RBRACE          reduce using rule 7 (keys -> key keys .)


state 36

    (7) keys -> key . keys
    (7) keys -> . key keys
    (8) keys -> . empty
    (5) key -> . STRING
    (6) key -> . BAREWORD
    (4) empty -> .

    STRING          shift and go to state 9
    BAREWORD        shift and go to state 5
    RBRACE          reduce using rule 4 (empty -> .)

    keys                           shift and go to state 35
    empty                          shift and go to state 37
    key                            shift and go to state 36

state 37

    (8) keys -> empty .

    RBRACE          reduce using rule 8 (keys -> empty .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: reduce/reduce conflict in state 32 resolved using rule (statements -> empty)
WARNING: rejected rule (keys -> empty) in state 32
