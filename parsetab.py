
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'BAREWORD EQUALS GEQUALS GTHAN LBRACE LEQUALS LTHAN NUMBER RBRACE STRING VARIABLEscript : statementsstatements : statement statementsstatements : emptyempty :key : STRING\n           | BAREWORDkeys : key keyskeys : emptystatement : VARIABLE EQUALS NUMBERstatement : binopexpression : VARIABLEexpression : keyexpression : NUMBERbinop : key EQUALS expression\n             | key GTHAN expression\n             | key GEQUALS expression\n             | key LEQUALS expression\n             | key LTHAN expressionlist : LBRACE keys RBRACEexpression : listblock : LBRACE statements RBRACEexpression : block'
    
_lr_action_items = {'LBRACE':([10,11,12,13,14,],[17,17,17,17,17,]),'STRING':([0,4,5,6,9,10,11,12,13,14,17,18,19,20,21,22,23,24,25,26,27,28,31,33,34,36,],[9,-10,-6,9,-5,9,9,9,9,9,9,-20,-13,-12,-11,-17,-22,-15,-14,-18,-16,-9,9,-21,-19,9,]),'LEQUALS':([2,5,9,31,],[10,-6,-5,10,]),'GTHAN':([2,5,9,31,],[11,-6,-5,11,]),'EQUALS':([2,5,7,9,31,],[12,-6,16,-5,12,]),'RBRACE':([4,5,6,8,9,15,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,],[-10,-6,-4,-3,-5,-2,-4,-20,-13,-12,-11,-17,-22,-15,-14,-18,-16,-9,33,34,-4,-3,-21,-19,-7,-4,-8,]),'NUMBER':([10,11,12,13,14,16,],[19,19,19,19,19,28,]),'LTHAN':([2,5,9,31,],[13,-6,-5,13,]),'BAREWORD':([0,4,5,6,9,10,11,12,13,14,17,18,19,20,21,22,23,24,25,26,27,28,31,33,34,36,],[5,-10,-6,5,-5,5,5,5,5,5,5,-20,-13,-12,-11,-17,-22,-15,-14,-18,-16,-9,5,-21,-19,5,]),'VARIABLE':([0,4,5,6,9,10,11,12,13,14,17,18,19,20,21,22,23,24,25,26,27,28,33,34,],[7,-10,-6,7,-5,21,21,21,21,21,7,-20,-13,-12,-11,-17,-22,-15,-14,-18,-16,-9,-21,-19,]),'GEQUALS':([2,5,9,31,],[14,-6,-5,14,]),'$end':([0,1,3,4,5,6,8,9,15,18,19,20,21,22,23,24,25,26,27,28,33,34,],[-4,-1,0,-10,-6,-4,-3,-5,-2,-20,-13,-12,-11,-17,-22,-15,-14,-18,-16,-9,-21,-19,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statements':([0,6,17,],[1,15,29,]),'statement':([0,6,17,],[6,6,6,]),'binop':([0,6,17,],[4,4,4,]),'keys':([17,31,36,],[30,35,35,]),'script':([0,],[3,]),'list':([10,11,12,13,14,],[18,18,18,18,18,]),'block':([10,11,12,13,14,],[23,23,23,23,23,]),'key':([0,6,10,11,12,13,14,17,31,36,],[2,2,20,20,20,20,20,31,36,36,]),'expression':([10,11,12,13,14,],[22,24,25,26,27,]),'empty':([0,6,17,31,36,],[8,8,32,37,37,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> script","S'",1,None,None,None),
  ('script -> statements','script',1,'p_script','parse.py',86),
  ('statements -> statement statements','statements',2,'p_statement_statements','parse.py',91),
  ('statements -> empty','statements',1,'p_statements_empty','parse.py',96),
  ('empty -> <empty>','empty',0,'p_empty','parse.py',101),
  ('key -> STRING','key',1,'p_key','parse.py',106),
  ('key -> BAREWORD','key',1,'p_key','parse.py',107),
  ('keys -> key keys','keys',2,'p_keys','parse.py',112),
  ('keys -> empty','keys',1,'p_keys_empty','parse.py',118),
  ('statement -> VARIABLE EQUALS NUMBER','statement',3,'p_statement_var_assign','parse.py',123),
  ('statement -> binop','statement',1,'p_statement_binop','parse.py',129),
  ('expression -> VARIABLE','expression',1,'p_expression_variable','parse.py',134),
  ('expression -> key','expression',1,'p_expression_key','parse.py',139),
  ('expression -> NUMBER','expression',1,'p_expression_number','parse.py',143),
  ('binop -> key EQUALS expression','binop',3,'p_binop','parse.py',148),
  ('binop -> key GTHAN expression','binop',3,'p_binop','parse.py',149),
  ('binop -> key GEQUALS expression','binop',3,'p_binop','parse.py',150),
  ('binop -> key LEQUALS expression','binop',3,'p_binop','parse.py',151),
  ('binop -> key LTHAN expression','binop',3,'p_binop','parse.py',152),
  ('list -> LBRACE keys RBRACE','list',3,'p_list','parse.py',168),
  ('expression -> list','expression',1,'p_expression_list','parse.py',173),
  ('block -> LBRACE statements RBRACE','block',3,'p_block','parse.py',178),
  ('expression -> block','expression',1,'p_expression_block','parse.py',183),
]
